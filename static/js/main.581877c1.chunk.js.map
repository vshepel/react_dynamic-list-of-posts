{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","components/PostDetails.tsx","components/UserSelector.tsx","hooks/useOutsideClick.ts","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","post","onSelect","className","map","id","title","type","classNames","onClick","undefined","Loader","NewCommentForm","onAdd","useState","isLoading","setIsLoading","name","email","body","formFields","setFormFields","formErrors","setFormErrors","handleChangeFormErrors","field","newValue","state","handleChangeFormFields","handleSubmitForm","e","a","preventDefault","hasErrors","trim","onSubmit","onReset","htmlFor","placeholder","value","onChange","target","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","PostDetails","hasError","setHasError","showForm","setShowForm","comments","setComments","useEffect","catch","finally","length","comment","href","filter","newComment","postId","UserSelector","selectedUser","user","dropdownRef","useRef","isActive","setIsActive","users","setUsers","ref","callback","handleClick","current","contains","document","addEventListener","removeEventListener","useOutsideClick","role","handleSelectUser","App","setUser","userPosts","setUserPosts","setPost","ReactDOM","render","getElementById"],"mappings":"gRAUaA,EAA6B,SAAC,GAAD,IACxCC,EADwC,EACxCA,MACMC,EAFkC,EAExCC,KAFwC,IAGxCC,gBAHwC,MAG7B,aAH6B,SAKxC,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGJ,EAAMK,KAAI,SAAAH,GAAI,OACb,qBAAkB,UAAQ,OAA1B,UACE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKI,KAE3B,oBAAI,UAAQ,YAAZ,SAAyBJ,EAAKK,QAE9B,oBAAIH,UAAU,8BAAd,SACE,wBACEI,KAAK,SACL,UAAQ,aACRJ,UAAWK,IAAW,iBAAkB,CACtC,YAAwB,OAAZR,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOJ,EAAKI,KAExCI,QAAS,kBAAMP,GACD,OAAZF,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOJ,EAAKI,QAAKK,EAAYT,IAP/C,UAUe,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOJ,EAAKI,GAAK,QAAU,aAhBvCJ,EAAKI,gB,eC3BXM,G,MAAS,kBACpB,qBAAKR,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wB,+BCINS,EAAkC,SAAC,GAA0B,IAAD,IAAvBC,aAAuB,MAAf,aAAe,EACvE,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAAsB,CACxDG,KAAM,GACNC,MAAO,GACPC,KAAM,KAHR,mBAAOC,EAAP,KAAmBC,EAAnB,KAKA,EAAoCP,mBAAS,CAC3CG,MAAM,EACNC,OAAO,EACPC,MAAM,IAHR,mBAAOG,EAAP,KAAmBC,EAAnB,KAMMC,EAAyB,SAC7BC,EACAC,GAEAH,GAAc,SAAAI,GAAK,kCACdA,GADc,kBAEhBF,EAAQC,QAIPE,EAAyB,SAC7BH,EACAC,GAEAL,EAAc,2BACTD,GADQ,kBAEVK,EAAQC,KAEXF,EAAuBC,GAAO,IAG1BI,EAAgB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACvBD,EAAEE,iBAEEC,GAAY,EAEXb,EAAWH,KAAKiB,SACnBV,EAAuB,QAAQ,GAC/BS,GAAY,GAGTb,EAAWF,MAAMgB,SACpBV,EAAuB,SAAS,GAChCS,GAAY,GAGTb,EAAWD,KAAKe,SACnBV,EAAuB,QAAQ,GAC/BS,GAAY,IAGVA,EApBmB,wDAwBvBjB,GAAa,GAxBU,UA0BjBH,EAAMO,GA1BW,QA4BvBQ,EAAuB,OAAQ,IAC/BZ,GAAa,GA7BU,4CAAH,sDA+CtB,OACE,uBACE,UAAQ,iBACRmB,SAAUN,EACVO,QAnBoB,SAACN,GACvBA,EAAEE,iBAEFX,EAAc,CACZJ,KAAM,GACNC,MAAO,GACPC,KAAM,KAERI,EAAc,CACZN,MAAM,EACNC,OAAO,EACPC,MAAM,KAKR,UAKE,sBAAKhB,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQkC,QAAQ,sBAAjC,yBAIA,sBACElC,UAAWK,IAAW,yBAA0B,CAC9C,kBAAmBc,EAAWL,OAFlC,UAKE,uBACEV,KAAK,OACLU,KAAK,OACLZ,GAAG,sBACHiC,YAAY,eACZnC,UAAWK,IAAW,QAAS,CAAE,YAAac,EAAWL,OACzDsB,MAAOnB,EAAWH,KAClBuB,SAAU,SAACV,GAAD,OAAOF,EAAuB,OAAQE,EAAEW,OAAOF,UAG3D,sBAAMpC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGdmB,EAAWL,MACV,sBACEd,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBmB,EAAWL,MACV,mBAAGd,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQkC,QAAQ,uBAAjC,0BAIA,sBACElC,UAAWK,IAAW,yBAA0B,CAC9C,kBAAmBc,EAAWJ,QAFlC,UAKE,uBACEX,KAAK,OACLU,KAAK,QACLZ,GAAG,uBACHiC,YAAY,iBACZnC,UAAWK,IAAW,QAAS,CAAE,YAAac,EAAWJ,QACzDqB,MAAOnB,EAAWF,MAClBsB,SAAU,SAACV,GAAD,OAAOF,EAAuB,QAASE,EAAEW,OAAOF,UAG5D,sBAAMpC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGdmB,EAAWJ,OACV,sBACEf,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBmB,EAAWJ,OACV,mBAAGf,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQkC,QAAQ,eAAjC,0BAIA,qBAAKlC,UAAU,UAAf,SACE,0BACEE,GAAG,eACHY,KAAK,OACLqB,YAAY,oBACZnC,UAAWK,IAAW,WAAY,CAAE,YAAac,EAAWH,OAC5DoB,MAAOnB,EAAWD,KAClBqB,SAAU,SAACV,GAAD,OAAOF,EAAuB,OAAQE,EAAEW,OAAOF,YAI5DjB,EAAWH,MACV,mBAAGhB,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEI,KAAK,SACLJ,UAAWK,IAAW,iBAAkB,CACtC,aAAcO,IAHlB,mBAUF,qBAAKZ,UAAU,UAAf,SAEE,wBAAQI,KAAK,QAAQJ,UAAU,0BAA/B,4BCtNJuC,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAIa,IAHbC,EAGY,uDAHY,MAExBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQjC,KAAOkC,KAAKC,UAAUH,GAC9BC,EAAQG,QAAU,CAChB,eAAgB,oCAKbZ,EAAK,KACTa,MAAK,kBAAMC,MAAMf,EAAWO,EAAKG,MACjCI,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIX,GAAJ,OAAoBD,EAAWC,IADzBW,EAGL,SAAIX,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAHlDS,EAMH,SAACX,GAAD,OAAiBD,EAAQC,EAAK,WC7B3BY,EAA+B,SAAC,GAAc,IAAZ5D,EAAW,EAAXA,KAC7C,EAAkCa,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOgD,EAAP,KAAiBC,EAAjB,KACA,EAAgCjD,oBAAS,GAAzC,mBAAOkD,EAAP,KAAiBC,EAAjB,KACA,EAAgCnD,mBAAoB,IAApD,mBAAOoD,EAAP,KAAiBC,EAAjB,KA8BA,OAZAC,qBAAU,WACJnE,IACFe,GAAa,GACbiD,GAAY,GAEZL,EAAA,2BAA+B3D,EAAKI,KACjCmD,MAAK,SAAAL,GAAI,OAAIgB,EAAYhB,MACzBkB,OAAM,kBAAMN,GAAY,MACxBO,SAAQ,kBAAMtD,GAAa,SAE/B,CAACf,IAGF,qBAAKE,UAAU,UAAU,UAAQ,cAAjC,SACE,qBAAKA,UAAU,UAAU,UAAQ,cAAjC,SACGF,GACC,qCACE,sBAAKE,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBAA6BF,EAAKI,GAAlC,aAAyCJ,EAAKK,SAC9C,mBAAG,UAAQ,WAAX,SAAuBL,EAAKkB,UAG9B,sBAAKhB,UAAU,QAAf,UACGY,GAAa,cAAC,EAAD,KAEZA,GAAa+C,GACb,qBAAK3D,UAAU,yBAAyB,UAAQ,gBAAhD,mCAKAY,IAAcmD,EAASK,QACvB,mBAAGpE,UAAU,aAAa,UAAQ,oBAAlC,8BAKAY,KAAemD,EAASK,QACxB,qCACE,mBAAGpE,UAAU,aAAb,uBAEC+D,EAAS9D,KAAI,SAAAoE,GAAO,OACnB,0BAEErE,UAAU,mBACV,UAAQ,UAHV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAGsE,KAAI,iBAAYD,EAAQtD,OAAS,UAAQ,gBAA5C,SACGsD,EAAQvD,OAEX,wBACE,UAAQ,gBACRV,KAAK,SACLJ,UAAU,kBACV,aAAW,SACXM,QAAS,kBAxEJJ,EAwE8BmE,EAAQnE,GAvEjE8D,EAAYD,EAASQ,QAAO,SAAAF,GAAO,OAAIA,EAAQnE,KAAOA,WACtDuD,EAAA,oBAA2BvD,IAFD,IAACA,GAmEP,8BAWF,qBAAKF,UAAU,eAAe,UAAQ,cAAtC,SACGqE,EAAQrD,SApBNqD,EAAQnE,WA2BnBU,IAAc+C,IAAaE,GAC3B,wBACE,UAAQ,qBACRzD,KAAK,SACLJ,UAAU,iBACVM,QAAS,kBAAMwD,GAAY,IAJ7B,gCAWHD,GAAY,cAAC,EAAD,CAAgBnD,MA7Fd,SAAC8D,GACxB,OAAOf,EACC,YADD,2BAEAe,GAFA,IAGHC,OAAM,OAAE3E,QAAF,IAAEA,OAAF,EAAEA,EAAMI,MAEfmD,MAAK,SAAAL,GACJgB,EAAY,GAAD,mBAAKD,GAAL,CAAef,mBClBrB0B,EAAgC,SAAC,GAGvC,IAFCC,EAEF,EAFJC,KAEI,IADJ7E,gBACI,MADO,aACP,EACE8E,EAAcC,iBAAO,MAE3B,EAAgCnE,oBAAS,GAAzC,mBAAOoE,EAAP,KAAiBC,EAAjB,KACA,EAA0BrE,mBAAiB,IAA3C,mBAAOsE,EAAP,KAAcC,EAAd,KAeA,OC/B6B,SAC7BC,EAEAC,GAEA,IAAMC,EAAc,SAAC1D,GAEjBwD,GACGA,EAAIG,UACHH,EAAIG,QAAQC,SAAsB5D,EAAEW,SAExC8C,KAIJnB,qBAAU,WAGR,OAFAuB,SAASC,iBAAiB,QAASJ,GAE5B,WACLG,SAASE,oBAAoB,QAASL,ODI1CM,CAAgBd,EAAaG,GAE7Bf,qBAAU,WACRR,EAAW,UAAUJ,MAAK,SAAAL,GACxBkC,EAASlC,QAEV,IAGD,sBACEmC,IAAKN,EACL,UAAQ,eACR7E,UAAWK,IAAW,WAAY,CAAE,YAAa0E,IAHnD,UAKE,qBAAK/E,UAAU,mBAAf,SACE,yBACEI,KAAK,SACLJ,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdM,QAAS,kBAAM0E,GAAaD,IAL9B,UAOE,+BAAOJ,EAAeA,EAAa7D,KAAO,kBAE1C,sBAAMd,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBAAKA,UAAU,gBAAgBE,GAAG,gBAAgB0F,KAAK,OAAvD,SACE,qBAAK5F,UAAU,mBAAf,SACGiF,EAAMhF,KAAI,SAAA2E,GAAI,OACb,mBAEEN,KAAI,gBAAWM,EAAK1E,IACpBF,UAAWK,IAAW,gBAAiB,CACrC,YAAauE,EAAK1E,MAAL,OAAYyE,QAAZ,IAAYA,OAAZ,EAAYA,EAAczE,MAEzCI,QAAS,kBA5CI,SAACsE,GACxB7E,EAAS6E,GACTI,GAAY,GA0Caa,CAAiBjB,IANlC,SAQGA,EAAK9D,MAPD8D,EAAK1E,eE7CX4F,EAAgB,WAC3B,MAAkCnF,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOgD,EAAP,KAAiBC,EAAjB,KACA,EAAwBjD,qBAAxB,mBAAOiE,EAAP,KAAamB,EAAb,KACA,EAAkCpF,mBAAiB,IAAnD,mBAAOqF,EAAP,KAAkBC,EAAlB,KACA,EAAwBtF,qBAAxB,mBAAOb,EAAP,KAAaoG,EAAb,KAgBA,OATAjC,qBAAU,WACJW,GACFnB,EAAA,wBAA4BmB,EAAK1E,KAC9BmD,MAAK,SAAAL,GAAI,OAAIiD,EAAajD,MAC1BkB,OAAM,kBAAMN,GAAY,MACxBO,SAAQ,kBAAMtD,GAAa,QAE/B,CAAC+D,IAGF,sBAAM5E,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACE4E,KAAMA,EACN7E,SAvBS,SAAC4E,GACxBoB,EAAQpB,GACR9D,GAAa,QAyBH,sBAAKb,UAAU,QAAQ,UAAQ,cAA/B,UACGY,GAAa,cAAC,EAAD,KAEZA,IAAcgE,GACd,mBAAG,UAAQ,iBAAX,+BAKAhE,GAAa+C,GACb,qBACE3D,UAAU,yBACV,UAAQ,oBAFV,oCAQAY,GAAagE,IAASoB,EAAU5B,QAChC,qBAAKpE,UAAU,0BAA0B,UAAQ,aAAjD,2BAKAY,GACGgE,KACEoB,EAAU5B,QAEb,cAAC,EAAD,CACEtE,KAAMA,EACNF,MAAOoG,EACPjG,SAAUmG,YAOtB,qBACE,UAAQ,UACRlG,UAAWK,IACT,OACA,YACA,eACA,UACA,CACE,gBAAiBP,IARvB,SAYE,qBAAKE,UAAU,gCAAf,SACE,cAAC,EAAD,CAAaF,KAAMA,gBC/FjCqG,IAASC,OACP,cAAC,EAAD,IACAZ,SAASa,eAAe,W","file":"static/js/main.581877c1.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  post?: Post;\n  onSelect?: (post: Post | undefined) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  post: selectedPost,\n  onSelect = () => {},\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr key={post.id} data-cy=\"Post\">\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">{post.title}</td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames('button is-link', {\n                  'is-light': selectedPost?.id !== post.id,\n                })}\n                onClick={() => onSelect(\n                  selectedPost?.id === post.id ? undefined : post,\n                )}\n              >\n                {selectedPost?.id === post.id ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onAdd?: (comment: CommentData) => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onAdd = () => {} }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [formFields, setFormFields] = useState<CommentData>({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [formErrors, setFormErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const handleChangeFormErrors = (\n    field: keyof CommentData,\n    newValue: boolean,\n  ) => {\n    setFormErrors(state => ({\n      ...state,\n      [field]: newValue,\n    }));\n  };\n\n  const handleChangeFormFields = (\n    field: keyof CommentData,\n    newValue: string,\n  ) => {\n    setFormFields({\n      ...formFields,\n      [field]: newValue,\n    });\n    handleChangeFormErrors(field, false);\n  };\n\n  const handleSubmitForm = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    let hasErrors = false;\n\n    if (!formFields.name.trim()) {\n      handleChangeFormErrors('name', true);\n      hasErrors = true;\n    }\n\n    if (!formFields.email.trim()) {\n      handleChangeFormErrors('email', true);\n      hasErrors = true;\n    }\n\n    if (!formFields.body.trim()) {\n      handleChangeFormErrors('body', true);\n      hasErrors = true;\n    }\n\n    if (hasErrors) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    await onAdd(formFields);\n\n    handleChangeFormFields('body', '');\n    setIsLoading(false);\n  };\n\n  const handleResetForm = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    setFormFields({\n      name: '',\n      email: '',\n      body: '',\n    });\n    setFormErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmitForm}\n      onReset={handleResetForm}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div\n          className={classNames('control has-icons-left', {\n            'has-icons-right': formErrors.name,\n          })}\n        >\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': formErrors.name })}\n            value={formFields.name}\n            onChange={(e) => handleChangeFormFields('name', e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formErrors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div\n          className={classNames('control has-icons-left', {\n            'has-icons-right': formErrors.email,\n          })}\n        >\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': formErrors.email })}\n            value={formFields.email}\n            onChange={(e) => handleChangeFormFields('email', e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formErrors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': formErrors.body })}\n            value={formFields.body}\n            onChange={(e) => handleChangeFormFields('body', e.target.value)}\n          />\n        </div>\n\n        {formErrors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\nimport { Comment, CommentData } from '../types/Comment';\n\ntype Props = {\n  post: Post | undefined;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const handleDeleteComment = (id: number) => {\n    setComments(comments.filter(comment => comment.id !== id));\n    client.delete(`/comments/${id}`);\n  };\n\n  const handleAddComment = (newComment: CommentData) => {\n    return client\n      .post('/comments', {\n        ...newComment,\n        postId: post?.id,\n      })\n      .then(data => {\n        setComments([...comments, data as Comment]);\n      });\n  };\n\n  useEffect(() => {\n    if (post) {\n      setIsLoading(true);\n      setShowForm(false);\n\n      client.get(`/comments?postId=${post.id}`)\n        .then(data => setComments(data as Comment[]))\n        .catch(() => setHasError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        {post && (\n          <>\n            <div className=\"block\">\n              <h2 data-cy=\"PostTitle\">{`#${post.id}: ${post.title}`}</h2>\n              <p data-cy=\"PostBody\">{post.body}</p>\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {!isLoading && hasError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {!isLoading && !comments.length && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n\n              {!isLoading && !!comments.length && (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n\n                  {comments.map(comment => (\n                    <article\n                      key={comment.id}\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                    >\n                      <div className=\"message-header\">\n                        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => handleDeleteComment(comment.id)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n                </>\n              )}\n\n              {!isLoading && !hasError && !showForm && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setShowForm(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </div>\n\n            {showForm && <NewCommentForm onAdd={handleAddComment} />}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\nimport { useOutsideClick } from '../hooks/useOutsideClick';\n\ntype Props = {\n  user?: User;\n  onSelect?: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  user: selectedUser,\n  onSelect = () => {},\n}) => {\n  const dropdownRef = useRef(null);\n\n  const [isActive, setIsActive] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n\n  const handleSelectUser = (user: User) => {\n    onSelect(user);\n    setIsActive(false);\n  };\n\n  useOutsideClick(dropdownRef, setIsActive);\n\n  useEffect(() => {\n    client.get('/users').then(data => {\n      setUsers(data as User[]);\n    });\n  }, []);\n\n  return (\n    <div\n      ref={dropdownRef}\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n              onClick={() => handleSelectUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\n\nexport const useOutsideClick = (\n  ref: React.RefObject<HTMLDivElement>,\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  callback: (T?: any) => void,\n) => {\n  const handleClick = (e: Event) => {\n    if (\n      ref\n      && ref.current\n      && !ref.current.contains(<HTMLElement>e.target)\n    ) {\n      callback();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [user, setUser] = useState<User>();\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [post, setPost] = useState<Post | undefined>();\n\n  const handleSelectUser = (selectedUser: User) => {\n    setUser(selectedUser);\n    setIsLoading(true);\n  };\n\n  useEffect(() => {\n    if (user) {\n      client.get(`/posts?userId=${user.id}`)\n        .then(data => setUserPosts(data as Post[]))\n        .catch(() => setHasError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [user]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  user={user}\n                  onSelect={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {isLoading && <Loader />}\n\n                {!isLoading && !user && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {!isLoading && hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isLoading && user && !userPosts.length && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!isLoading\n                  && user\n                  && !!userPosts.length\n                  && (\n                    <PostsList\n                      post={post}\n                      posts={userPosts}\n                      onSelect={setPost}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': post,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails post={post} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}